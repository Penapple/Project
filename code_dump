#event response
from slackeventsapi import SlackEventAdapter
from slackclient import SlackClient

SLACK_VERIFICATION_TOKEN =

slack_events_adapter = SlackEventAdapter(SLACK_VERIFICATION_TOKEN, endpoint="/slack/events")

# Create a SlackClient for your bot to use for Web API requests
SLACK_BOT_TOKEN =

# Example responder to greetings
@slack_events_adapter.on("message")
def handle_message(event_data):
    message = event_data["event"]
    ts = message['ts']
    tk = event_data['api_app_id']
    # If the incoming message contains "hi", then respond with a "Hello" message
    if message.get("subtype") is None and ("hi" in message.get('text') or "HI" in message.get('text')):
        channel = message["channel"]
        text = "Hello <@%s>! :tada:" % message["user"]
        # for record in postman_tokens:
            # if record['token'] == tk:    bot_token = record['bot_token']
        SlackClient(SLACK_BOT_TOKEN).api_call("reactions.add", channel=channel, name="football", timestamp=ts)
        SlackClient(SLACK_BOT_TOKEN).api_call("chat.postMessage", channel=channel, text=text)


slack_events_adapter.start(port=5000)

# send msg to user directly 
from slackclient import SlackClient
import json
import datetime

BOT_TOKEN = 'xoxb'

slack_client = SlackClient(BOT_TOKEN)
yesterday = datetime.datetime.today() - datetime.timedelta(days=1)

rt1 = ""
for i in range(8):
    rt1 += str(i) + '--' + str(i) + '\n'

rt2 = ""
for i in range(5):
    rt2 += str(i) + '--' + str(i) + '\n'


if __name__ == '__main__':
    #chan = "C6VRAB7FV"
    api_call = slack_client.api_call("im.list")
    attachment = json.dumps([
    {
    "fallback": "New ticket from Andrea Lee - Ticket #1943: Can't reset my password - https://groove.hq/path/to/ticket/1943",
    "pretext": "gy",
    "author_name": "G1",
    "author_link": "http://flickr.com/bobby/",
    "author_icon": "http://americanfootballfilms.com/wp-content/uploads/2012/11/nfl-logo.jpg",
    "text": rt1,
    "color": "#7CD197"
    },
    {
     "fallback": "New ticket from Andrea Lee - Ticket #1943: Can't reset my password - https://groove.hq/path/to/ticket/1943",
     "title": ":baseball: G2",
     "title_link": "https://groove.hq/path/to/ticket/1943",
     "text": rt2,
     "color": "#0594CC",
     },
    {
        "text": "_type_ `m` _check more_ ",
        "mrkdwn_in": ["text"]
    }
])

    if api_call.get('ok'):
        for im in api_call.get("ims"):
            im_channel = im.get("id")
            slack_client.api_call("chat.postMessage", channel=im_channel,
                                  text=yesterday.date(), attachments=attachment, as_user=True)

# safe url flask 
def generate_url():
    global secret
    secret = urandom(2)  # such as generate from os.urandom(length) ***
    current_time = str(int(time.time()))
    token = hmac.new(secret, current_time.encode('utf-8'), hashlib.sha256).hexdigest()
    return "http://94d013b9.ngrok.io/pageview?time=%(current_time)s&token=%(token)s" % {   #change local host each time on ngrok and slack api
        "current_time": current_time,
        "token": token
    }

def verify(time_in_link, token_in_link):
    time_limit = 12  # sec
    if (time.time() - int(time_in_link)) > time_limit:  #timeout
        print("figure expired")
        return False
    if hmac.new(secret, time_in_link.encode('utf-8'), hashlib.sha256).hexdigest() == token_in_link:  # Check the token is available or not
        print("token is correct")
        return True
    else:
        print("incorrect token")
        return False


@application.route("/slack", methods=['POST'])  #json img done
def parse_request():
    if request.form.get('user_name') in ['kyang', 'test'] and request.form.get('token') == app_token and request.form.get('text') == 'aws':
        link = generate_url()
        return jsonify({
        'text': 'Pageview',
        'attachments': [
            {
                'fallback': 'Required plain-text summary of the attachment.',
                'color': '#36a64f',
                'title': 'Pageview AWS Demo',
                "color": "#36a64f",
                'title_link': "https://www.kryteriononline.com/",
                'image_url': link,
                "ts": int(time.time())
            }
        ]
    })
    else:
        return Response("Not a valid argument", status=405)

@application.route("/pageview", methods=['GET'])
def png():
    if verify(request.args.get('time'), request.args.get('token')):
        return pageview()
    else:
        return Response("Sorry, this figure is expired and only available on Slack.\n  -Kyle(kyang@kryteriononline.com)", status=405)


if __name__ == "__main__":
    application.run(debug=False)
