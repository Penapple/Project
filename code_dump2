###receive and insert token

from flask import Flask, request, render_template
from slackclient import SlackClient
from flask_sqlalchemy import SQLAlchemy
import os

#os environment var
client_id = os
client_secret = os
oauth_scope = os

#connect to Postgres DB
app = Flask(__name__)
app.config['SQLALCHEMY_DATABASE_URI'] = 'postgresql://username:pwd@hostname/db'

app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
app.config['SQLALCHEMY_COMMIT_ON_TEARDOWN'] = True  #automatic commits of db changes at the end of each request
db = SQLAlchemy(app)

class Team(db.Model):
    __tablename__ = 'teams'
    id = db.Column(db.Integer, primary_key=True)
    team_name = db.Column(db.String(80), unique=True)
    team_id = db.Column(db.Integer(80), unique=True)
    scope = db.Column(db.String(120))
    token = db.Column(db.String(120), unique=True)
    bot_token = db.Column(db.String(120), unique=True)

    def __init__(self, team_name, team_id, scope, token, bot_token):
        self.team_name = team_name
        self.team_id = team_id
        self.scope = scope
        self.token = token
        self.bot_token = bot_token

    def __repr__(self):
        return '<Team %r>' % self.team_name

def addteam(team_name, team_id, scope, token, bot_token):      #add or update team record in db/ delete for uninstall in event
    print("Entered")
    team = Team(team_name, team_id, scope, token, bot_token)
    existing_team = Team.query.filter_by(team_id = team_id).first()
    if existing_team != None:
        print("User Exists")
        existing_team.token = token
        existing_team.bot_token = bot_token
        print("Team information update completed")
    else:
        db.session.add(team)
        db.session.commit()
        print("New team record completed") #if not print ("db not success")


@app.route('/', methods=['GET', 'POST'])
def index():
    return render_template('index.html')

# @app.route("/begin_auth", methods=["GET"])
# def pre_install():
#   return '''
#       <a href="https://slack.com/oauth/authorize?scope={0}&client_id={1}">
#           Add to Slack
#       </a>
#   '''.format(oauth_scope, client_id)

@app.route("/finish_auth", methods=["GET", "POST"])
def post_install():

    # Retrieve the auth code from the request params
    auth_code = request.args['code']

    # An empty string is a valid token for this request
    sc = SlackClient("")

    # Request the auth tokens from Slack
    auth_response = sc.api_call(
    "oauth.access",
    client_id=client_id,
    client_secret=client_secret,
    code=auth_code
    )

    print("team name:", auth_response['team_name'], "-- Auth complete!")

    addteam(auth_response['team_name'], auth_response['team_id'],
            auth_response['scope'], auth_response['access_token'],
            auth_response['bot']['bot_access_token'])
    return "Complete page" #design a page for complete

if __name__ == '__main__':
    app.run(debug=True)
